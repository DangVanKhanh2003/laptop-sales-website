{
  "openapi": "3.0.1",
  "info": {
    "title": "Selling Electronic API",
    "description": "API for retrieving Selling electronic data",
    "version": "V1"
  },
  "paths": {
    "/api/AddressBook/GetByPage": {
      "get": {
        "tags": [
          "AddressBook"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/AddressBook/GetByIdAddressBook{idAddress}": {
      "get": {
        "tags": [
          "AddressBook"
        ],
        "parameters": [
          {
            "name": "idAddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/AddressBook/GetAllByIdCustomer{idCustomer}": {
      "get": {
        "tags": [
          "AddressBook"
        ],
        "parameters": [
          {
            "name": "idCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/AddressBook/GetCountAddress": {
      "get": {
        "tags": [
          "AddressBook"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/AddressBook": {
      "post": {
        "tags": [
          "AddressBook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "AddressBook"
        ],
        "parameters": [
          {
            "name": "idAddressbook",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "AddressBook"
        ],
        "parameters": [
          {
            "name": "idCustomer",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/CategoryControler/getAllCategory": {
      "get": {
        "tags": [
          "CategoryControler"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/CategoryControler/{id}": {
      "get": {
        "tags": [
          "CategoryControler"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/CategoryControler": {
      "post": {
        "tags": [
          "CategoryControler"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "CategoryControler"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "CategoryControler"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Color/getAllColor": {
      "get": {
        "tags": [
          "Color"
        ],
        "summary": "List all colors. Color used for chossing color of color image",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Color/{id}": {
      "get": {
        "tags": [
          "Color"
        ],
        "summary": "Get colors by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Color": {
      "post": {
        "tags": [
          "Color"
        ],
        "summary": "Add new color.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Color"
        ],
        "summary": "Update color",
        "description": "server find color by id(input) and update the color.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Color"
        ],
        "summary": "Delete color.",
        "description": "Server find color and delete.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount/getAllAccount": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount/getByPage": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount/GetAccByIdCustomer{idCustomer}": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "parameters": [
          {
            "name": "idCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount/Login": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "if login success => token(access vs refresh).",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount/RegisterAccount": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Create new user with new account",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount": {
      "put": {
        "tags": [
          "CustomerAccount"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newPassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "not code yet",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerInfor/getAllCustomerInfor": {
      "get": {
        "tags": [
          "CustomerInfor"
        ],
        "summary": "get all customer infor",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "defaul is null. you can fill:name_asc(sort ascending by name)/  name_desc(sort descending by name)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerInfor/getByPage": {
      "get": {
        "tags": [
          "CustomerInfor"
        ],
        "summary": "get all customer infor by page",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "defaul is null. you can fill:name_asc(sort ascending by name)/  name_desc(sort descending by name)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerInfor/GetAccByIdCustomer{idCustomer}": {
      "get": {
        "tags": [
          "CustomerInfor"
        ],
        "parameters": [
          {
            "name": "idCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerInfor": {
      "post": {
        "tags": [
          "CustomerInfor"
        ],
        "summary": "add success => infor new customer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "CustomerInfor"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerInfor"
        ],
        "summary": "not complete",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/GetAllOrder": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get all order by paging",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "value: \"pending\"/\"cancel\"/\"approve\". Default = \"pending\"",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "sortByOrderDate",
            "in": "query",
            "description": "value: \"timeDesc\"/\"timeAsc\". Default = null",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/GetAllOrderPaging": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get all order by paging",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "value: \"pending\"/\"cancel\"/\"approve\". Default = \"pending\"",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "sortByOrderDate",
            "in": "query",
            "description": "value: \"timeDesc\"/\"timeAsc\". Default = null",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "default = 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "default = 10",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/GetAllOrderByIdStorePaging": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get all order by paging",
        "parameters": [
          {
            "name": "idStore",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "value: \"pending\"/\"cancel\"/\"approve\". Default = \"pending\"",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "sortByOrderDate",
            "in": "query",
            "description": "value: \"timeDesc\"/\"timeAsc\". Default = null",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "default = 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "default = 10",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/GetAllOrderByIdStore": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get all order by paging",
        "parameters": [
          {
            "name": "idStore",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "value: \"pending\"/\"cancel\"/\"approve\". Default = \"pending\"",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "sortByOrderDate",
            "in": "query",
            "description": "value: \"timeDesc\"/\"timeAsc\". Default = null",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/ExportOrder": {
      "put": {
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "idOrder",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/CancelOrder": {
      "put": {
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "idOrder",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/OderOffline": {
      "put": {
        "tags": [
          "Order"
        ],
        "requestBody": {
          "description": "CustomerId can be null",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOfflineModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOfflineModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOfflineModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending/GetAll": {
      "get": {
        "tags": [
          "OrderPending"
        ],
        "summary": "get all order pending by status and sort by time",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "cancel/pending/approve",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "timeAsc/timeDesc/null",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending/GetByPage": {
      "get": {
        "tags": [
          "OrderPending"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "cancel/pending/approve",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "timeAsc/timeDesc/null",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending/GetByIdOrderPending": {
      "get": {
        "tags": [
          "OrderPending"
        ],
        "parameters": [
          {
            "name": "idOrderPending",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending": {
      "post": {
        "tags": [
          "OrderPending"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPendingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPendingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPendingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending/ChangeStatusFromEmployee": {
      "put": {
        "tags": [
          "OrderPending"
        ],
        "summary": "actor: employee=> employee can change status: cancel, approve. Employee cannot change status if status isn't pending.\r\nif status is \"approve\" and input valid => amount of store will reduce by amount order.",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "cancel, approve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idOrderPending",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idEmployee",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idStore",
            "in": "query",
            "description": "if you want to change status is approve. You need provide idStore.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending/cancelFromCustomer": {
      "put": {
        "tags": [
          "OrderPending"
        ],
        "parameters": [
          {
            "name": "idOrderPending",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/getAllProduct": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "List all products.",
        "description": "In default, value of sortBy is null.If you want to sort, you can enter value for \"sortBy\" parameter.",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "sortBy: price_desc/price_asc/name_desc/null(default)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/getAllProductByCategory{idCategory}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "List all products by id category.",
        "description": "In default, value of sortBy is null.If you want to sort, you can enter value for \"sortBy\" parameter.",
        "parameters": [
          {
            "name": "idCategory",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "sortBy: price_desc/price_asc/name_desc/null(default)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get products by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/count": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Count products.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/page": {
      "get": {
        "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/getAllColorOfProduct": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "get all colors of product.",
        "parameters": [
          {
            "name": "ProudctId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/GetAllSpecificationsByIdProduct": {
      "get": {
        "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/GetAllImagesByIdProduct": {
      "get": {
        "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/SearchProductByName": {
      "get": {
        "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "nameProduct",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/AddNewProduct": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Add new product.",
        "description": "mainImg used for show image product in the card product of list product(mainImg is link img)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/postListImagesForProduct": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "add a list images of product.",
        "requestBody": {
          "description": "Enter a list images",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/postListSpecificationsForProduct": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "add a list specifications of product.",
        "requestBody": {
          "description": "Enter a list images",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/UpdateListImageOfProduct": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Delete all images of product, and then add new list images of product.",
        "parameters": [
          {
            "name": "idProduct",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/UpdateListSpecificationsOfProduct": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Delete all specifications of product, and then add new list specifications of product.",
        "parameters": [
          {
            "name": "idProduct",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/updateproductbyidProduct": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update product",
        "description": "server find prouduct by id(input) and update the product. mainImg used for show image product in the card product of list product(mainImg is link img)",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/DeleteProductById": {
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete product.",
        "description": "Server find product and delete.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/DeleteListImagesOfProduct": {
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete all images of product.",
        "parameters": [
          {
            "name": "idProduct",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/DeleteImageByIdImg": {
      "delete": {
        "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "idImg",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/DeleteSpecificationsByIdSpecifications": {
      "delete": {
        "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "idSpecifications",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Product/DeleteListSpecificationsOfProduct": {
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete all specifications of product.",
        "parameters": [
          {
            "name": "idProduct",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Sales/getAllSales": {
      "get": {
        "tags": [
          "Sales"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Sales/{id}": {
      "get": {
        "tags": [
          "Sales"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Sales/getSalesByIdProduct": {
      "get": {
        "tags": [
          "Sales"
        ],
        "summary": "Get all sale by id product",
        "parameters": [
          {
            "name": "idProduct",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Sales": {
      "post": {
        "tags": [
          "Sales"
        ],
        "summary": "",
        "requestBody": {
          "description": "\"numProduct = null\" is not limited number products sale",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Sales"
        ],
        "summary": "",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "\"numProduct = null\" is not limited number products sale",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Sales"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Sales/{idProduct}": {
      "delete": {
        "tags": [
          "Sales"
        ],
        "summary": "Delete all sales of product by idProduct",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/ShoppingCart": {
      "get": {
        "tags": [
          "ShoppingCart"
        ],
        "parameters": [
          {
            "name": "idCustomer",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "ShoppingCart"
        ],
        "parameters": [
          {
            "name": "idShoppingCartItem",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/ShoppingCart/AddItemShoppingCart": {
      "post": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "if exist element(in shopping cart) same idCustomer, idProduct, idColor with this item => \r\naddition amount to amount of element in this shopping cart. The sale of product automatic addition when shopping cart item add new.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShoppingCartItemModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShoppingCartItemModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShoppingCartItemModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/ShoppingCart/UpdateAmountForItemShoppingCart": {
      "put": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "update amount for item in shoppingCart by idShoppingCart",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idShoppingCartItem",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/ShoppingCart/DeleteAllShoppingCartItemByIdCustomer": {
      "delete": {
        "tags": [
          "ShoppingCart"
        ],
        "parameters": [
          {
            "name": "idCustomer",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/getAllStore": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "List all Stores.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/{idStore}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Get stores by id.",
        "parameters": [
          {
            "name": "idStore",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/AddStore": {
      "post": {
        "tags": [
          "Store"
        ],
        "summary": "Add new store.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/UpdateStore": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Update store",
        "description": "server find store by id(input) and update the store.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/DeleteStore": {
      "delete": {
        "tags": [
          "Store"
        ],
        "summary": "Delete store.",
        "description": "Server find store and delete.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/GetAllProductByIdStore{idStore}": {
      "get": {
        "tags": [
          "Store"
        ],
        "parameters": [
          {
            "name": "idStore",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/GetProductByIdStore": {
      "get": {
        "tags": [
          "Store"
        ],
        "parameters": [
          {
            "name": "idStore",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idProduct",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/GetStoreExistProduct{idProduct}": {
      "get": {
        "tags": [
          "Store"
        ],
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/AddStoreProduct": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "if item exist => add. if item don't exist => create new item.",
        "parameters": [
          {
            "name": "idProduct",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idStore",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amountAdd",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idColor",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/ReduceStoreProduct": {
      "put": {
        "tags": [
          "Store"
        ],
        "parameters": [
          {
            "name": "idProduct",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idStore",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amountReduce",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idColor",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/employee/Store/UpdateStoreProduct": {
      "put": {
        "tags": [
          "Store"
        ],
        "parameters": [
          {
            "name": "idProduct",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idStore",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idColor",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddressBookModel": {
        "type": "object",
        "properties": {
          "province": {
            "type": "string",
            "nullable": true
          },
          "district": {
            "type": "string",
            "nullable": true
          },
          "commune": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "numberHouse": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressModel": {
        "type": "object",
        "properties": {
          "province": {
            "type": "string",
            "nullable": true
          },
          "district": {
            "type": "string",
            "nullable": true
          },
          "commune": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "numberHouse": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryModel": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "categoryIcon": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ColorModel": {
        "type": "object",
        "properties": {
          "colorName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerModel": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          }
        },
        "additionalProperties": false
      },
      "ImageProductsModel": {
        "type": "object",
        "properties": {
          "imgLink": {
            "type": "string",
            "nullable": true
          },
          "colorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OrderOfflineModel": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "storeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "listProductOrder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOrderModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderPendingModel": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "listProductOrederPending": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOrderPendingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductModel": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "nullable": true
          },
          "series": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mainImg": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductOrderModel": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "colorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductOrderPendingModel": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "colorId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ProductSpecifiactionModel": {
        "type": "object",
        "properties": {
          "specType": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SalesModel": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "numProduct": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "format": "date-time"
          },
          "percentSale": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ShoppingCartItemModel": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "format": "int32"
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "colorId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "StoreModel": {
        "type": "object",
        "properties": {
          "storeName": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Enter 'Bearer' [space] and then your token in the text input below.\nExample: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}