{
  "openapi": "3.0.1",
  "info": {
    "title": "Selling Electronic API",
    "description": "API for retrieving Selling electronic data",
    "version": "V1"
  },
  "paths": {
    "/api/AddressBook": {
      "get": {
        "tags": [
          "AddressBook"
        ],
        "summary": "get all address by page",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "default = 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "default = 10",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "AddressBook"
        ],
        "summary": "Add new address in address book of customer",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "AddressBook"
        ],
        "summary": "Change infor address book by idAddressBook",
        "parameters": [
          {
            "name": "idAddressbook",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/AddressBook/{idAddress}": {
      "get": {
        "tags": [
          "AddressBook"
        ],
        "summary": "get address by id address",
        "parameters": [
          {
            "name": "idAddress",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "AddressBook"
        ],
        "summary": "Delete address by id",
        "parameters": [
          {
            "name": "idAddress",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/AddressBook/Customer/{idCustomer}": {
      "get": {
        "tags": [
          "AddressBook"
        ],
        "summary": "get all address by id customer",
        "parameters": [
          {
            "name": "idCustomer",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/AddressBook/Count-Address": {
      "get": {
        "tags": [
          "AddressBook"
        ],
        "summary": "Count address",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CategoryControler": {
      "get": {
        "tags": [
          "CategoryControler"
        ],
        "summary": "Get all category",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "CategoryControler"
        ],
        "summary": "Add Category",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CategoryControler/{id}": {
      "get": {
        "tags": [
          "CategoryControler"
        ],
        "summary": "get category by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "CategoryControler"
        ],
        "summary": "Update category by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "CategoryControler"
        ],
        "summary": "Delete catory by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Color": {
      "get": {
        "tags": [
          "Color"
        ],
        "summary": "List all colors. Color used for chossing color of color image",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Color"
        ],
        "summary": "Add new color.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Color/{id}": {
      "get": {
        "tags": [
          "Color"
        ],
        "summary": "Get colors by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Color"
        ],
        "summary": "Update color",
        "description": "server find color by id(input) and update the color.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ColorModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Color"
        ],
        "summary": "Delete color.",
        "description": "Server find color and delete.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Comment": {
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "get all comment by id product",
        "parameters": [
          {
            "name": "idProduct",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Comment"
        ],
        "summary": "add new comment",
        "requestBody": {
          "description": "\"parentId\", \"toCustomerId\": can null. If comment is sub comment. \"toCustomerId\" and \"parentId\" must not null",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommentModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Comment"
        ],
        "summary": "Delete comment by id comment",
        "parameters": [
          {
            "name": "idComment",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Comment/{idComment}": {
      "put": {
        "tags": [
          "Comment"
        ],
        "summary": "Update content of comment by id comment",
        "parameters": [
          {
            "name": "idComment",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get all account customer",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Change Pasword",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newPassword",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "not code yet",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount/Page": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "get all account by page",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount/Customer/{idCustomer}": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get account by idCustomer",
        "parameters": [
          {
            "name": "idCustomer",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount/Login": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "if login success => token(access vs refresh).",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerAccount/RegisterAccount": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Create new user with new account",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerInfor": {
      "get": {
        "tags": [
          "CustomerInfor"
        ],
        "summary": "get all customer infor",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "defaul is null. you can fill:name_asc(sort ascending by name)/  name_desc(sort descending by name)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "CustomerInfor"
        ],
        "summary": "add success => infor new customer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerInfor/page": {
      "get": {
        "tags": [
          "CustomerInfor"
        ],
        "summary": "get all customer infor by page",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "defaul is null. you can fill:name_asc(sort ascending by name)/  name_desc(sort descending by name)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/CustomerInfor/{idCustomer}": {
      "get": {
        "tags": [
          "CustomerInfor"
        ],
        "parameters": [
          {
            "name": "idCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "CustomerInfor"
        ],
        "summary": "update customer by id",
        "parameters": [
          {
            "name": "idCustomer",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerInfor"
        ],
        "summary": "not complete",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/HistoryOrder/SuccessOrder": {
      "get": {
        "tags": [
          "HistoryOrder"
        ],
        "summary": "Get all success order by id customer",
        "parameters": [
          {
            "name": "idCustomer",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortByOrderDate",
            "in": "query",
            "description": "value: \"timeDesc\"/\"timeAsc\". Default = null",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/HistoryOrder/CancelOrder": {
      "get": {
        "tags": [
          "HistoryOrder"
        ],
        "summary": "Get all cancel order by id customer",
        "parameters": [
          {
            "name": "idCustomer",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortByOrderDate",
            "in": "query",
            "description": "value: \"timeDesc\"/\"timeAsc\". Default = null",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get all order",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "value: \"pending\"/\"cancel\"/\"approve\". Default = \"pending\"",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "sortByOrderDate",
            "in": "query",
            "description": "value: \"timeDesc\"/\"timeAsc\". Default = null",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/page": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get all order by paging",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "value: \"pending\"/\"cancel\"/\"approve\". Default = \"pending\"",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "sortByOrderDate",
            "in": "query",
            "description": "value: \"timeDesc\"/\"timeAsc\". Default = null",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "default = 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "default = 10",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/store/{idStore}/page": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get all order by paging",
        "parameters": [
          {
            "name": "idStore",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "value: \"pending\"/\"cancel\"/\"approve\". Default = \"pending\"",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "sortByOrderDate",
            "in": "query",
            "description": "value: \"timeDesc\"/\"timeAsc\". Default = null",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "default = 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "default = 10",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/store/{idStore}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get all order by paging",
        "parameters": [
          {
            "name": "idStore",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "value: \"pending\"/\"cancel\"/\"approve\". Default = \"pending\"",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "sortByOrderDate",
            "in": "query",
            "description": "value: \"timeDesc\"/\"timeAsc\". Default = null",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/customer/{idCustomer}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get all order by id customer",
        "parameters": [
          {
            "name": "idCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "value: \"pending\"/\"cancel\"/\"approve\". Default = \"pending\"",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/Export": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Export order",
        "parameters": [
          {
            "name": "idOrder",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/Cancel": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel order",
        "parameters": [
          {
            "name": "idOrder",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Order/Oder-offline": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Create order offline. Used for employee create order at store.",
        "requestBody": {
          "description": "CustomerId can be null",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOfflineModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOfflineModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOfflineModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending": {
      "get": {
        "tags": [
          "OrderPending"
        ],
        "summary": "get all order pending",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "cancel/pending/approve",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "timeAsc/timeDesc/null",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "OrderPending"
        ],
        "summary": "Add order pending",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPendingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPendingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPendingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending/Page": {
      "get": {
        "tags": [
          "OrderPending"
        ],
        "summary": "get all order pending by page",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "cancel/pending/approve",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "timeAsc/timeDesc/null",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending/{idOrderPending}": {
      "get": {
        "tags": [
          "OrderPending"
        ],
        "parameters": [
          {
            "name": "idOrderPending",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending/Customer/{idCustomer}": {
      "get": {
        "tags": [
          "OrderPending"
        ],
        "summary": "get all order pending by id customer",
        "parameters": [
          {
            "name": "idCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "cancel/pending/approve",
            "schema": {
              "type": "string",
              "default": "pending"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending/{idOrderPending}/Employee/{idEmployee}/Change-status": {
      "put": {
        "tags": [
          "OrderPending"
        ],
        "summary": "Change status from employee.\r\nactor: employee=> employee can change status: cancel, approve. Employee cannot change status if status isn't pending.\r\nif status is \"approve\" and input valid => amount of store will reduce by amount order.",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "cancel, approve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idOrderPending",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idEmployee",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idStore",
            "in": "query",
            "description": "if you want to change status is approve. You need provide idStore.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OrderPending/{idOrderPending}/Customer-Cancel": {
      "put": {
        "tags": [
          "OrderPending"
        ],
        "summary": "Cancel order pending from customer",
        "parameters": [
          {
            "name": "idOrderPending",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/save-image": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "",
        "description": "{\r\n   \"base64Image\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\r\n  \"fileName\": \"Iphone14Xanh\",\r\n   \"extension\": \".png\"\r\n }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveImageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveImageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveImageModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the requested item."
          },
          "404": {
            "description": "If the item is not found."
          }
        }
      }
    },
    "/api/Product/get-image": {
      "get": {
        "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "idSaveImg",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "List all products.",
        "description": "In default, value of sortBy is null.If you want to sort, you can enter value for \"sortBy\" parameter.",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "sortBy: price_desc/price_asc/name_desc/null(default)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Add new product.",
        "description": "mainImg used for show image product in the card product of list product(mainImg is link img)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/Category/{idCategory}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "List all products by id category.",
        "description": "In default, value of sortBy is null.If you want to sort, you can enter value for \"sortBy\" parameter.",
        "parameters": [
          {
            "name": "idCategory",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "sortBy: price_desc/price_asc/name_desc/null(default)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get products by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update product",
        "description": "server find prouduct by id(input) and update the product. mainImg used for show image product in the card product of list product(mainImg is link img)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete product.",
        "description": "Server find product and delete.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/Count": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Count products.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/Page": {
      "get": {
        "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/{ProudctId}/Color": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "get all colors of product.",
        "parameters": [
          {
            "name": "ProudctId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/{ProductId}/Specification": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get all specification by productId",
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/{ProductId}/Image": {
      "get": {
        "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/Search": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Search product by nameProduct",
        "parameters": [
          {
            "name": "nameProduct",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Image": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "add a list images of product.",
        "requestBody": {
          "description": "Enter a list images",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Specification": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "add a list specifications of product.",
        "requestBody": {
          "description": "Enter a list images",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/{idProduct}/Image": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Delete all images of product, and then add new list images of product.",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageProductsModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete all images of product.",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Product/{idProduct}/Specification": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Delete all specifications of product, and then add new list specifications of product.",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSpecifiactionModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete all specifications of product.",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Image/{idImg}": {
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete Image by idImg",
        "parameters": [
          {
            "name": "idImg",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Specification/{idSpecifications}": {
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete Specification by idSpecification",
        "parameters": [
          {
            "name": "idSpecifications",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Sales": {
      "get": {
        "tags": [
          "Sales"
        ],
        "summary": "get all sales",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Sales"
        ],
        "summary": "add new sale",
        "requestBody": {
          "description": "\"numProduct = null\" is not limited number products sale",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Sales/{id}": {
      "get": {
        "tags": [
          "Sales"
        ],
        "summary": "get sale by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Sales"
        ],
        "summary": "update sale by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "\"numProduct = null\" is not limited number products sale",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SalesModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Sales"
        ],
        "summary": "delete sale by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Sales/Product/{idProduct}": {
      "get": {
        "tags": [
          "Sales"
        ],
        "summary": "Get all sale by id product",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Sales"
        ],
        "summary": "Delete all sales of product by idProduct",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/ShoppingCart": {
      "get": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "get all shopping cart item by id customer",
        "parameters": [
          {
            "name": "idCustomer",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "if exist element(in shopping cart) same idCustomer, idProduct, idColor with this item => \r\naddition amount to amount of element in this shopping cart. The sale of product automatic addition when shopping cart item add new.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShoppingCartItemModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShoppingCartItemModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShoppingCartItemModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/ShoppingCart/{idShoppingCartItem}": {
      "put": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "update amount for item in shoppingCart by idShoppingCart",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idShoppingCartItem",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "delete by idShoppingCartItem",
        "parameters": [
          {
            "name": "idShoppingCartItem",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/ShoppingCart/customer{idCustomer}": {
      "delete": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "Delete all shopping cart item by idCustomer",
        "parameters": [
          {
            "name": "idCustomer",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Stats": {
      "get": {
        "tags": [
          "Stats"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "unit",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Stats/Category{id}": {
      "get": {
        "tags": [
          "Stats"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unit",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "date"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Store": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "List all Stores.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Store"
        ],
        "summary": "Add new store.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Store/{idStore}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Get stores by id.",
        "parameters": [
          {
            "name": "idStore",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Store/{id}": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Update store",
        "description": "server find store by id(input) and update the store.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StoreModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Store"
        ],
        "summary": "Delete store.",
        "description": "Server find store and delete.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Store/{idStore}/Product": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Get all product in store by idStore",
        "parameters": [
          {
            "name": "idStore",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Store/{idStore}/Product/{idProduct}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "get product in store by idProduct and idStore",
        "parameters": [
          {
            "name": "idStore",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idProduct",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Store/{idProduct}/exist-in-store": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "get all store exist product",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Store/{idStore}/Product/{idProduct}/Color/{idColor}/add-new-product": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Add product in store by idStore, idColor and idProduct.\r\nif item exist => add. if item don't exist => create new item.",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idStore",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amountAdd",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idColor",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Store/{idStore}/Product/{idProduct}/Color/{idColor}/reduce-new-product": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Reduce product in store by idStore, idColor and idProduct",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idStore",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amountReduce",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idColor",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Store/{idStore}/Product/{idProduct}/Color/{idColor}/update-amount-product": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Update amount of product by idStore, idProduct and idColor",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idStore",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idColor",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddressBookModel": {
        "type": "object",
        "properties": {
          "province": {
            "type": "string",
            "nullable": true
          },
          "district": {
            "type": "string",
            "nullable": true
          },
          "commune": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "numberHouse": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressModel": {
        "type": "object",
        "properties": {
          "province": {
            "type": "string",
            "nullable": true
          },
          "district": {
            "type": "string",
            "nullable": true
          },
          "commune": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "numberHouse": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryModel": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "categoryIcon": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ColorModel": {
        "type": "object",
        "properties": {
          "colorName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommentModel": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "commentDetail": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "toCustomerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerModel": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          }
        },
        "additionalProperties": false
      },
      "ImageProductsModel": {
        "type": "object",
        "properties": {
          "imgLink": {
            "type": "string",
            "nullable": true
          },
          "colorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OrderOfflineModel": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "storeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "listProductOrder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOrderModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderPendingModel": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "listProductOrederPending": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOrderPendingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductModel": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "nullable": true
          },
          "series": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mainImg": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductOrderModel": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "colorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductOrderPendingModel": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "colorId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ProductSpecifiactionModel": {
        "type": "object",
        "properties": {
          "specType": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SalesModel": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "numProduct": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "format": "date-time"
          },
          "percentSale": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SaveImageModel": {
        "type": "object",
        "properties": {
          "base64Image": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShoppingCartItemModel": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "format": "int32"
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "colorId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "StoreModel": {
        "type": "object",
        "properties": {
          "storeName": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Enter 'Bearer' [space] and then your token in the text input below.\nExample: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}